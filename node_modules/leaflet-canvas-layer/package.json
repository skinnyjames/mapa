{
  "_args": [
    [
      {
        "raw": "leaflet-canvas-layer@github:skinnyjames/gLayers.Leaflet",
        "scope": null,
        "escapedName": "leaflet-canvas-layer",
        "name": "leaflet-canvas-layer",
        "rawSpec": "github:skinnyjames/gLayers.Leaflet",
        "spec": "github:skinnyjames/gLayers.Leaflet",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:skinnyjames/gLayers.Leaflet.git",
          "sshUrl": "git+ssh://git@github.com/skinnyjames/gLayers.Leaflet.git",
          "httpsUrl": "git+https://github.com/skinnyjames/gLayers.Leaflet.git",
          "gitUrl": "git://github.com/skinnyjames/gLayers.Leaflet.git",
          "shortcut": "github:skinnyjames/gLayers.Leaflet",
          "directUrl": "https://raw.githubusercontent.com/skinnyjames/gLayers.Leaflet/master/package.json"
        }
      },
      "/home/webdev/repos/contrib/mapa"
    ]
  ],
  "_from": "git://github.com/skinnyjames/gLayers.Leaflet.git#7f63cbfa6147c4acbbc967649dc34ca9333c1f9d",
  "_id": "leaflet-canvas-layer@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/leaflet-canvas-layer",
  "_phantomChildren": {},
  "_requested": {
    "raw": "leaflet-canvas-layer@github:skinnyjames/gLayers.Leaflet",
    "scope": null,
    "escapedName": "leaflet-canvas-layer",
    "name": "leaflet-canvas-layer",
    "rawSpec": "github:skinnyjames/gLayers.Leaflet",
    "spec": "github:skinnyjames/gLayers.Leaflet",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:skinnyjames/gLayers.Leaflet.git",
      "sshUrl": "git+ssh://git@github.com/skinnyjames/gLayers.Leaflet.git",
      "httpsUrl": "git+https://github.com/skinnyjames/gLayers.Leaflet.git",
      "gitUrl": "git://github.com/skinnyjames/gLayers.Leaflet.git",
      "shortcut": "github:skinnyjames/gLayers.Leaflet",
      "directUrl": "https://raw.githubusercontent.com/skinnyjames/gLayers.Leaflet/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/skinnyjames/gLayers.Leaflet.git#7f63cbfa6147c4acbbc967649dc34ca9333c1f9d",
  "_shasum": "8c10a95fabb8975341a17601057a904e9036acb2",
  "_shrinkwrap": null,
  "_spec": "leaflet-canvas-layer@github:skinnyjames/gLayers.Leaflet",
  "_where": "/home/webdev/repos/contrib/mapa",
  "author": "",
  "bugs": {
    "url": "https://github.com/skinnyjames/gLayers.Leaflet/issues"
  },
  "dependencies": {},
  "description": "generic  map layers for leaflet 0.7 and 1.0-rc, moving from original GIST here https://gist.github.com/Sumbera/11114288 to this repo.",
  "devDependencies": {},
  "gitHead": "7f63cbfa6147c4acbbc967649dc34ca9333c1f9d",
  "homepage": "https://github.com/skinnyjames/gLayers.Leaflet#readme",
  "license": "ISC",
  "main": "L.CanvasLayer.js",
  "name": "leaflet-canvas-layer",
  "optionalDependencies": {},
  "readme": "# gLayers.Leaflet\ngeneric  map layers for leaflet 0.7 and 1.0-rc, moving from original GIST here https://gist.github.com/Sumbera/11114288 to this repo.\n\nL.CanvasLayer  - full screen generic canvas layer for leaflet\n\n##API\n\n|methods       | description            | \n| ------------- |:-------------| \n|needRedraw   | will schedule next frame call for drawLayer|\n|delegate(object)   | optionaly set receiver of the events if not 'inheriting' from L.CanvasLayer |\n\n\nevents          | description            | \n| ------------- |:-------------| \n|onLayerDidMount   | after layer is attached/added to the map|\n|onLayerWillUnmount   | before  layer is removed from the map|\n|onDrawLayer(info)       | when layer is drawn , info contains view parameters like bounds, size, canvas etc.\nnote :  events will be called only if presented on the 'subclass' or if delegate(receiver) is set\n\n##  Examples \n### Basic usage\n```javascript\n        L.canvasLayer()\n            .delegate(this) // -- if we do not inherit from L.CanvasLayer  we can setup a delegate to receive events from L.CanvasLayer\n            .addTo(leafletMap);\n      \n        function onDrawLayer(info) {\n            var ctx = info.canvas.getContext('2d');\n            ctx.clearRect(0, 0, info.canvas.width, info.canvas.height);\n            ctx.fillStyle = \"rgba(255,116,0, 0.2)\";\n            for (var i = 0; i < data.length; i++) {\n                var d = data[i];\n                if (info.bounds.contains([d[0], d[1]])) {\n                    dot = info.layer._map.latLngToContainerPoint([d[0], d[1]]);\n                    ctx.beginPath();\n                    ctx.arc(dot.x, dot.y, 3, 0, Math.PI * 2);\n                    ctx.fill();\n                    ctx.closePath();\n                }\n            }\n        };\n```\n\n### Custom layer\n```javascript\n  \n          myCustomCanvasDraw= function(){\n              this.onLayerDidMount = function (){      \n                 // -- prepare custom drawing    \n              };\n              this.onLayerWillUnmount  = function(){\n                 // -- custom cleanup    \n              };\n              this.setData = function (data){\n                // -- custom data set\n                this.needRedraw(); // -- call to drawLayer\n              };\n              this.onDrawLayer = function (viewInfo){\n              // -- custom  draw\n              }\n              \n          }\n          \n          myCustomCanvasDraw.prototype = new L.CanvasLayer(); // -- setup prototype \n          \n          var myLayer = new myCustomCanvasDraw();\n          myLayer.addTo(leafletMap);\n ```   \n\n\nOther useful full view  Leaflet Canvas sources here:\n- [leaflet.heat](https://github.com/Leaflet/Leaflet.heat)\n- [Full Canvas] (https://github.com/cyrilcherian/Leaflet-Fullcanvas)\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/skinnyjames/gLayers.Leaflet.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.0"
}
