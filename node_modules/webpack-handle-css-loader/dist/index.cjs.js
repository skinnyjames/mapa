'use strict';

var HandleCSSLoader = function HandleCSSLoader(ref) {
  if ( ref === void 0 ) ref = {};
  var fallbackLoader = ref.fallbackLoader; if ( fallbackLoader === void 0 ) fallbackLoader = 'style-loader';
  var cssLoader = ref.cssLoader; if ( cssLoader === void 0 ) cssLoader = 'css-loader';
  var postcss = ref.postcss;
  var sourceMap = ref.sourceMap;
  var extract = ref.extract;
  var minimize = ref.minimize;
  var cssModules = ref.cssModules;
  var ExtractTextPlugin = ref.ExtractTextPlugin;

  this.fallbackLoader = fallbackLoader;
  this.cssLoader = cssLoader;
  this.postcssOptions = postcss;
  this.sourceMap = sourceMap;
  this.extract = extract;
  this.minimize = minimize;
  this.cssModules = cssModules;
  this.ExtractTextPlugin = ExtractTextPlugin;
  if (extract && !this.ExtractTextPlugin) {
    this.ExtractTextPlugin = require('extract-text-webpack-plugin');
  }
};

/**
 * Set value of instance option
 * @param {string} key
 * @param {any} value
 */
HandleCSSLoader.prototype.set = function set (key, value) {
  this[key] = value;
};

/**
 * Get the rule for specific loader
 * @param{RegExp} [test=undefined] File matcher
 * @param{RegExp} [loader=undefined] Loader name or path to it
 * @param{any} [options=undefined] Options for relevant loader
 * @return {Object} {@link https://webpack.js.org/configuration/module/#rule webpack Rule}
 */
HandleCSSLoader.prototype.getLoader = function getLoader (test, loader, options) {
    if ( options === void 0 ) options = {};

  var cssLoaderOptions = {
    autoprefixer: false,
    sourceMap: this.sourceMap,
    minimize: this.minimize
  };

  if (this.cssModules) {
    cssLoaderOptions.modules = true;
    cssLoaderOptions.importLoaders = 1;
    cssLoaderOptions.localIdentName = '[name]_[local]__[hash:base64:5]';
  }

  if (loader === 'css-loader') {
    Object.assign(cssLoaderOptions, options);
  }

  var use = [{
    loader: this.cssLoader,
    options: cssLoaderOptions
  }];

  if (loader !== 'postcss-loader' && this.postcssOptions !== false) {
    var postcssOptions = {
      sourceMap: this.sourceMap
    };

    if (Array.isArray(this.postcssOptions)) {
      postcssOptions.plugins = this.postcssOptions;
    } else if (typeof this.postcssOptions === 'object') {
      Object.assign(postcssOptions, this.postcssOptions);
    }

    use.push({
      loader: 'postcss-loader',
      options: postcssOptions
    });
  }

  if (loader && loader !== 'css-loader') {
    use.push({
      loader: loader,
      options: Object.assign({}, options, {
        sourceMap: this.sourceMap
      })
    });
  }

  return {
    test: test,
    use: this.extract ? this.ExtractTextPlugin.extract({
      use: use,
      fallback: this.fallbackLoader
    }) : [{
      loader: this.fallbackLoader,
      options: {
        sourceMap: this.sourceMap
      }
    } ].concat( use)
  };
};

/**
 * Get the rule for css files
 * @param{RegExp} [test=/\.css$/]  File matcher
 * @param{any} [options=undefined] Options for css-loader
 * @return {Object} {@link https://webpack.js.org/configuration/module/#rule webpack Rule}
 */
HandleCSSLoader.prototype.css = function css (test, options) {
  test = test || /\.css$/;
  return this.getLoader(test, 'css-loader', options);
};

/**
 * Get the rule for sass files
 * @param{RegExp} [test=/\.sass$/] File matcher
 * @param{any} [options=undefined] Options for sass-loader, `indentedSyntax` for sass-loader is `true` here
 * @return {Object} {@link https://webpack.js.org/configuration/module/#rule webpack Rule}
 */
HandleCSSLoader.prototype.sass = function sass (test, options) {
    if ( options === void 0 ) options = {};

  test = test || /\.sass$/;
  return this.getLoader(test, 'sass-loader', Object.assign({
    indentedSyntax: true
  }, options));
};

/**
 * Get the rule for scss files
 * @param{RegExp} [test=/\.scss$/]  File matcher
 * @param{any} [options=undefined] Options for sass-loader
 * @return {Object} {@link https://webpack.js.org/configuration/module/#rule webpack Rule}
 */
HandleCSSLoader.prototype.scss = function scss (test, options) {
  test = test || /\.scss$/;
  return this.getLoader(test, 'sass-loader', options);
};

/**
 * Get the rule for less files
 * @param{RegExp} [test=/\.less$/] File matcher
 * @param{any} [options=undefined] Options for less-loader
 * @return {Object} [Rule] {@link https://webpack.js.org/configuration/module/#rule webpack Rule}
 */
HandleCSSLoader.prototype.less = function less (test, options) {
  test = test || /\.less$/;
  return this.getLoader(test, 'less-loader', options);
};

/**
 * Get the rule for stylus files
 * @param{RegExp} [test=/\.stylus$/] File matcher
 * @param{any} [options=undefined] Options for stylus-loader
 * @return {Object} {@link https://webpack.js.org/configuration/module/#rule webpack Rule}
 */
HandleCSSLoader.prototype.stylus = function stylus (test, options) {
  test = test || /\.stylus$/;
  return this.getLoader(test, 'stylus-loader', options);
};

/**
 * Get the rule for styl files
 * @param{RegExp} [test=/\.styl$/] File matcher
 * @param{any} [options=undefined] Options for stylus-loader
 * @return {Object} {@link https://webpack.js.org/configuration/module/#rule webpack Rule}
 */
HandleCSSLoader.prototype.styl = function styl (test, options) {
  test = test || /\.styl$/;
  return this.getLoader(test, 'stylus-loader', options);
};

/**
 * Get the `loaders` options for vue-loader
 * @param{any} [options={}] Options for relevant loaders
 * @return {Object}
 * @example
 * handleLoader.vue({
 *scss: {},
 *less: {}
 * })
 */
HandleCSSLoader.prototype.vue = function vue (options) {
    var this$1 = this;
    if ( options === void 0 ) options = {};

  this.postcssOptions = false;
  this.cssModules = false;
  var loaders = {};
  for (var lang of ['css', 'sass', 'scss', 'less', 'stylus', 'styl']) {
    loaders[lang] = this$1[lang](null, options[lang]).use;
  }
  return loaders;
};

module.exports = HandleCSSLoader;
